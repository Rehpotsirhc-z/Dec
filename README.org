# Created 2024-03-04 Mon 18:13
#+title: Dec
#+author: Christopher
#+property: header-args :tangle "app/Main.hs" :comments link :mkdirp yes
#+export_file_name: README
* Table of Contents :toc:
- [[#introduction][Introduction]]
  - [[#why-declarative-package-management][Why declarative package management?]]
- [[#installation][Installation]]
  - [[#arch-linux][Arch Linux]]
- [[#dependencies][Dependencies]]
- [[#usage][Usage]]
  - [[#example-package-list][Example Package List]]
  - [[#example-usage][Example Usage]]
- [[#license][License]]
- [[#imports][Imports]]
- [[#main][Main]]
- [[#auxiliary-functions][Auxiliary Functions]]
  - [[#paru-dependency-check][Paru Dependency Check]]
  - [[#parse-arguments][Parse Arguments]]
  - [[#prompt-user][Prompt User]]
  - [[#remove-comments][Remove Comments]]
  - [[#printing-messages][Printing Messages]]
- [[#arguments][Arguments]]
- [[#package-functions][Package Functions]]
  - [[#upgrade][Upgrade]]
  - [[#install][Install]]
  - [[#remove][Remove]]
- [[#catching-errors][Catching Errors]]
* Introduction
Dec is a declarative package manager for Arch Linux and its derivatives.
** Why declarative package management?
1. You want to install your packages onto a different system. You can just copy over your package list (e.g. =/etc/packages=) and then run ~dec~.
2. You want to keep your system minimal. With declarative package management, you won't forget to uninstall unused packages.
* Installation
The easiest way to build Dec is to use [[https://docs.haskellstack.org/en/stable/install_and_upgrade/][Stack]]:

After you have installed Stack, use the following command to compile from source:

#+begin_src sh :tangle no
stack setup
stack install
#+end_src sh

~stack setup~ will automatically download the GHC compiler if you don't have it. ~stack install~ will install the Dec executable into =~/.local/bin=, which you should add to your =PATH=.
** TODO Arch Linux
If you are on Arch Linux, you can find Dec in the [[https://aur.archlinux.org/packages/dec][AUR]]. Simply clone the repository and then run ~makepkg -si~, or install it using an AUR helper like paru.
* Dependencies
The only dependency that is required for Dec to run is paru. However, you will need Stack to build Dec.
* Usage
Dec uses a package list to determine what packages should be installed. The location of the package list can be configured using the =DEC_PACKAGELIST= environmental variable or by using ~--packagelist~. Each line in the package list should contain the name of the package. Comments are made with "#".

For example, you can set =DEC_PACKAGELIST= equal to =/etc/packages=. Populate the list with all the packages you want to be installed. Then you can run Dec with ~dec~ and it will upgrade, install, and remove packages until it matches the list.
** Example Package List
#+begin_src sh
# Core
linux
linux-headers
linux-firmware
base
base-devel

# Browsers
firefox
qutebrowser

# Editing Programs
vim
neovim
emacs

# Games
0ad
#+end_src
** Example Usage
#+begin_src sh
export DEC_PACKAGELIST="/etc/packages"
dec
#+end_src

You could also do the following to achieve the same result:

#+begin_src sh
dec --packagelist="/etc/packages"
#+end_src

To only upgrade packages, you can do this (assuming you have set =DEC_PACKAGELIST=):

#+begin_src sh
dec upgrade
#+end_src

You can also do the same thing but with installing and/or removing packages:

#+begin_src sh
dec install
dec remove
dec upgrade remove
#+end_src
* License
GNU GPLv3
* Imports
This section imports some modules and sets language pragmas.

#+begin_src haskell
{-# LANGUAGE QuasiQuotes #-}

-- TODO colors are more bright than before
-- TODO Add the invalid argument
-- TODO Slow nub

module Main (main) where

import Control.Applicative (Alternative ((<|>)))
import Control.Monad (unless, when)
import Data.List (isInfixOf, nub, stripPrefix, (\\))
import Data.Maybe (fromMaybe, isJust)
import Data.String.QQ (s)
import qualified Data.Text as T
import System.Console.ANSI
  ( Color (Green, Red, Yellow),
    ColorIntensity (Dull, Vivid),
    ConsoleIntensity (BoldIntensity),
    ConsoleLayer (Foreground),
    SGR (Reset, SetColor, SetConsoleIntensity),
    setSGRCode,
  )
import System.Directory (findExecutable)
import System.Environment (getArgs, lookupEnv)
import System.Exit (exitFailure, exitSuccess)
import System.IO (hFlush, hPutStrLn, stderr, stdout)
import System.IO.Error (catchIOError)
import System.Process (callProcess, readProcess)
#+end_src
* Main
This section checks if paru is installed, gets the arguments passed into the program, and passes them into ~handleArgs~.

#+begin_src haskell
main :: IO ()
main = do
  paruInstalled <- checkParu
  unless paruInstalled $ do
    printError "Paru is not installed"
    exitFailure
  handleArgs =<< getArgs
#+end_src
* Auxiliary Functions
** Paru Dependency Check
This function checks if paru is installed on the system.

#+begin_src haskell
checkParu :: IO Bool
checkParu = fmap isJust (findExecutable "paru")
#+end_src
** Parse Arguments
This function parses the ~--packagelist=~ argument.

#+begin_src haskell
getPackageList :: [[Char]] -> Maybe [Char]
getPackageList args =
  case filter ("--packagelist=" `isInfixOf`) args of
    [result] -> Just result
    _moreThanOneOrNone -> Nothing
#+end_src
** Prompt User
This function gives the user a Yes/No prompt, with Yes being the default.

#+begin_src haskell
promptUser :: IO Bool
promptUser = do
  a <- getChar
  return $ a `elem` ['Y', 'y', '\n']
#+end_src
** Remove Comments
This function removes comments (~#~) from the input lines, along with any other whitespace.

#+begin_src haskell
removeComments :: String -> String
removeComments line =
  let noComment = takeWhile (/= '#') line
      trimmed = T.unpack $ T.strip $ T.pack noComment
   in trimmed
#+end_src
** Printing Messages
This section defines functions that print different types of messages to the user. These types include Errors, Headings, Information, Prompts, and a Help message.
*** Errors
#+begin_src haskell
printError :: String -> IO ()
printError str =
  hPutStrLn stderr $
    setSGRCode [SetColor Foreground Vivid Red]
      ++ str
      ++ setSGRCode [Reset]
#+end_src
*** Headings
#+begin_src haskell
printHeading :: String -> IO ()
printHeading str =
  putStrLn $
    setSGRCode [SetColor Foreground Vivid Yellow, SetConsoleIntensity BoldIntensity]
      ++ str
      ++ setSGRCode [Reset]
#+end_src
*** Information
#+begin_src haskell
printInfo :: String -> IO ()
printInfo str =
  putStrLn $
    setSGRCode [SetColor Foreground Dull Green]
      ++ str
      ++ setSGRCode [Reset]
#+end_src
*** Prompts
#+begin_src haskell
printPrompt :: String -> IO ()
printPrompt str =
  putStr $
    setSGRCode [SetColor Foreground Dull Green]
      ++ str
      ++ setSGRCode [Reset]
#+end_src
*** Help
#+begin_src haskell
printHelp :: IO ()
printHelp = printInfo [s|
Usage: dec [OPTIONS]
Declarative package manager for Arch Linux

Options:
  -h, --help            Show this help message
  --packagelist=FILE    Specify the package list
  upgrade               Upgrade packages
  install               Install packages
  remove                Remove packages

Examples:
  dec upgrade
  dec --packagelist=packages.txt install
  dec remove --packagelist=packages.txt|]
#+end_src
* Arguments
This parses the command line arguments. You can give Dec the following arguments:

- ~-h~ or ~--help~ will print a help message and exit
- ~--packagelist=~ will set the path to the list of packages
- ~upgrade~ will upgrade the packages
- ~install~ will install missing packages
- ~remove~ will remove unnecessary packages

You can run more than one operation by doing something like ~dec upgrade install~ or ~dec remove~. If neither ~upgrade~, ~install~, or ~remove~ are set, Dec will assume that you want to run all of them. If you do not want to pass in ~--packagelist=~, you can also set the =DEC_PACKAGELIST= environmental variable. However, the argument passed in has a higher precedent than the variable.

#+begin_src haskell
handleArgs :: [[Char]] -> IO ()
handleArgs args = do
  when ("--help" `elem` args || "-h" `elem` args) $ printHelp >> exitSuccess

  let doUpgrade = "upgrade" `elem` args
  let doInstall = "install" `elem` args
  let doRemove = "remove" `elem` args

  let packageListFromArgs = stripPrefix "--packagelist=" =<< getPackageList args
  packageListFromEnv <- lookupEnv "DEC_PACKAGELIST"

  let packageList = fromMaybe "" (packageListFromArgs <|> packageListFromEnv)

  when (packageList == "") $ do
    printError "No list of packages specified"
    printInfo "You can specify one by using --packagelist= or by setting DEC_PACKAGELIST"
    exitFailure

  when doUpgrade upgrade
  when doInstall $ install packageList
  when doRemove $ remove packageList
  unless
    (doUpgrade || doInstall || doRemove)
    (upgrade >> install packageList >> remove packageList)
#+end_src
* Package Functions
This section creates the functions that allow Dec to upgrade, install, and remove packages.
** Upgrade
This function will upgrade packages on the system. It checks for which packages can be upgraded and then prompts the user to upgrade them.

#+begin_src haskell
upgrade :: IO ()
upgrade = do
  printHeading "[[ Upgrading Packages ]]"
  printInfo "* paru -Syu"
  callProcess "paru" ["-Syu"] `catchIOError` paruError
#+end_src
** Install
This function will install packages specified in the package list. It first checks for what packages are missing and then prompts the user to install them.

*NOTE:* This time the function uses ~paru -Qqe~ so that it doesn't try to install packages that are already installed but are dependencies of another package.

#+begin_src haskell
install :: FilePath -> IO ()
install packageList = do
  packageListContents <- fmap lines (readFile packageList) `catchIOError` readPackageListError
  let packages = filter (not . null) $ map removeComments packageListContents
  systemPackages <- lines <$> readProcess "paru" ["-Qqe"] []
        -- `catchIOError` paruPackageError
  let toInstall = unwords $ nub $ packages \\ systemPackages

  printHeading "[[ Installing Packages ]]"
  if null toInstall
    then printInfo "No packages need to be installed"
    else do
      printInfo $ "* paru -S --asexplicit " ++ toInstall
      printPrompt "About to run above command. Continue? [Y/n] "
      hFlush stdout
      userInput <- promptUser
      when userInput $ callProcess "paru" ["-S", "--asexplicit", toInstall] `catchIOError` paruError
#+end_src
** Remove
This function will remove packages that are not specified in the package list. It first checks what packages are installed that are not specified in the list and then prompts the user to remove them.

*NOTE:* This time the function uses ~paru -Qqett~ so that it doesn't try to uninstall packages that are dependencies of another package.

#+begin_src haskell
remove :: FilePath -> IO ()
remove packageList = do
  packageListContents <- fmap lines (readFile packageList) `catchIOError` readPackageListError
  let packages = filter (not . null) $ map removeComments packageListContents
  systemPackages <- lines <$> readProcess "paru" ["-Qqett"] []
        -- `catchIOError` paruPackageError
  let toRemove = unwords $ nub $ systemPackages \\ packages

  printHeading "[[ Removing Packages ]]"
  if null toRemove
    then printInfo "No packages need to be removed"
    else do
      printInfo $ "* paru -D --asdeps " ++ toRemove
      printPrompt "About to run above command. Continue? [Y/n] "
      hFlush stdout
      userInput <- promptUser
      when userInput $ do
        callProcess "paru" ["-D", "--asdeps", toRemove] `catchIOError` paruError
        callProcess "paru" ["--clean"] `catchIOError` paruError
#+end_src
* TODO Catching Errors
This section declares how to handle various errors that could occur.

#+begin_src haskell
paruError :: Monad m => p -> m ()
paruError _ = return () -- Left blank since it could be user decline

-- TODO
-- paruPackageError _ = printError "Error running paru" >> exitFailure

readPackageListError :: p -> IO b
readPackageListError _ = printError "Could not read package list" >> exitFailure
#+end_src
